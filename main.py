# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sQZemFym6McKIWHuDj9kpE4om4vKDqvp
"""

"""
CMPS 6610  Assignment 1.
See problemset-01.pdf for details.
Adam Ledet
"""
# no imports needed.

def foo(a,b):
    #print("a:", a, " b:", b)
    if(a==0):
      return(b)
    elif(b==0):
      return(a)
    else:
      x = min(a,b)
      y = max(a,b)
      return(foo(y,(y%x)))

def longest_run(mylist, key):
    longest_size = 0
    counter = 0
    for c in mylist:
      if(c==key):
        counter+=1
      else:
        if(counter > longest_size):
          longest_size = counter
        counter=0
      if(counter > longest_size):
          longest_size = counter
    return(longest_size)


class Result:
    """ done """
    def __init__(self, left_size, right_size, longest_size, is_entire_range):
        self.left_size = left_size              # the length of the longest run on left side of input
                                                # eg, with a key of 12, [12 12 3] has left_size of 2
        self.right_size = right_size            # length of longest run on right side of input
                                                # eg, key 12, [3 12 12] has right_size of 2
        self.longest_size = longest_size        # length of longest run in input
                                                # eg, [12 12 4 12 12 12]: longest_size is 3
        self.is_entire_range = is_entire_range  # True if the entire input matches the key

    def __repr__(self):
        return('longest_size=%d left_size=%d right_size=%d is_entire_range=%s' %
              (self.longest_size, self.left_size, self.right_size, self.is_entire_range))

    #Check if a list has only 1 repeated element in it
    def is_entire_range(mylist):
      if(len(set(mylist))==1):
        return(True)
      else:
        return(False)

# Function called multiple times. Result is global values
def longest_run_recursive(mylist, key, result):
    print(mylist)
    if(not Result.is_entire_range(mylist)):
      longest_run_recursive(mylist[:len(mylist)//2],key, result)
      longest_run_recursive(mylist[len(mylist)//2:],key, result)
    else:
      if(result.longest_size<len(mylist)):
        print("RESIZE: ", result.longest_size, " -> ", len(mylist))
        result.longest_size = len(mylist)

# Main called once. Main function calls resursive
def longest_run_recursive_main(mylist, key):
  r = Result(mylist[:len(mylist)//2],mylist[len(mylist)//2:],0,mylist) #Set initial values for Result Class to contqain global values
  if(not Result.is_entire_range(mylist)):
      longest_run_recursive(mylist[:len(mylist)//2],key, r)
      longest_run_recursive(mylist[len(mylist)//2:],key, r)
  return(r.longest_size)

## Feel free to add your own tests here.
def test_longest_run():
    assert longest_run([2,12,12,8,12,12,12,0,12,1], 12) == 3

print(foo(2316784621378468712369,4))# Proper foo implementation

print(longest_run([2,12,12,8,12,12,12,0,12,1], 12))# Proper longest_run implementation

longest_run_recursive_main([2,12,12,8,12,12,12,0,12,1], 12)# recursive main incorrect because it does not account for splitting list between 2 keys.